:javascript
  $(function(){
    poll_for_running_instances_of_ksp();
  });
#welcome
  .grid_12
    %h1= "Jebretary v#{@version}"
    (Still in development, but the glue is holding)

    - unless @instances.empty?
      .instance_list
        %h2 Tracked Installs
        - @instances.each do |instance|
          .instance{:id => "installed_instance_#{instance.id}"}
            .grid_7.alpha
              %a{:href => instance_path(instance)}
                = instance.path
                .small= "#{instance.campaigns.count} Campaigns"
            - if RUBY_PLATFORM =~ /mswin|mingw|cygwin/ || Rails.env.eql?("development")
              .launch_links.grid_3.omega
                .shutdown_link
                  = link_to "Shutdown KSP", launch_path(:id => instance.id), :method => :delete, :confirm => "Are you sure?", :remote => true
                .launch_link
                  - mode = instance.use_x64_exe? ? "64" : "32"
                  = link_to "Launch KSP (x#{mode})", launch_path(:id => instance.id), :remote => true
              .launch_notice.grid_10
              .shutdown_notice.grid_10
            .clear

        .clear
        .vblk_2

        = link_to "Manage Instances", instances_path
        |
        = link_to "Manage Campaigns", campaigns_path
        .small
          .small.info If you are no longer using a particular instance of KSP it is a good idea to stop tracking it by removing it
          .small.info Removing an instance will not effect the files in KSP or the version history, you can always re-add it to pick up where you left off
          .small.info Removing a campaign is only needed if the actual campaign has been deleted from KSP. If you remove an existing campaign it will be recreated
    .clear
    - if @instances.empty?
      .vblk_1
      %h2 Welcome to Jebretary
      .vblk_1
      .grid_8.push_2
        %h2 First
        You need to tell me the location of a KSP install
        .small This needs to be a full path ie 'c:\games\KSPv0.20.2' or 'r:\games\my_fav_game' or wherever you keep it.
        .small If you have multiple instances of KSP you can set those up later.

        - content_for :information do
          .vblk_1
          %h3 Just so you know;
          In each folder found in saves (apart from scenarios and training), I will create a git repository that will be used to track your craft.
          .small It will create a hidden .git folder in each campaign folder.  For the love of Jeb do not alter the contents of that folder!

          %h3 You Need
          to make sure liquid.exe is also running.  liquid.exe monitors your craft for changes and updates the repository and database.

          %p When you click OK you will see a page that will list the campaigns found in the KSP install you entered above.  If you have craft in these they will be added to the repo and database, if you have lots of craft this might take a minute or two.

      .clear


      .grid_8.push_2
        #new_instance
          = render('instances/form', :instance => Instance.new)

      .clear
      .grid_8.push_2
        %h3= link_to_function "what is 'git'?", "$('#git_explaination').toggle('slow')"
        #git_explaination.hidden
          %h2 GIT
          %p git is a version control system used by many developers to track the changes they make, it's the one that Squad currently use for the KSP codebase.
          %p It tracks save points or 'commits' for files as you edit them and allows you to return a file to how it was at any one of the previous commits.
          %p git only tracks the difference between commits, just the lines of a file which have changed are stored, the parts which remain the same are not needlessly stored multiple times.  Its much more efficient than just taking a copy of the file each time.
          %p But git is a developers tool and if you like command line tools it's wonderful, to everyone else its not exactly user friendly.  Which is why I made Jebretary to automate using git and provide a (hopefully) simpler interface.


    -else
      .vblk_2
      .grid_7.push_1
        %h3=link_to_function "Add another KSP instance", "$('.additional_instance_form').toggle('slow');"
        .additional_instance_form.hidden
          Tell me where a different version/copy of KSP is installed;
          #new_instance_form
            = render('instances/form', :instance => Instance.new)
            .left= link_to_function "cancel", "$('#new_instance')[0].reset();$('.additional_instance_form').hide('slow');"
    .vblk_2
    .grid_10.push_1
      %h3= link_to_function "Jebretary Settings", "toggle_settings()"
      .settings.hidden
        %h4 Stock Parts
        .info.small By default craft that use parts from Squad and NASAmission are considered stock craft.
        .info.small If you want Jebretary to consider other mods as stock then add the folders to this list (case senstive and comma separated). 
        .info.small ie to consider MechJeb as part of stock put: Squad, NASAmission, MechJeb2
        %b.info.small updating this can take a while as all craft need to be rescanned for their part data.
        = form_tag "welcome/update" do |f|
          .left
            = text_field_tag :stock_parts, @config["stock_parts"].join(", ")
            = submit_tag("update", {:onclick => "$(this).hide(); $('.update_stock_ajax_loader').show()"})
          .left.update_stock_ajax_loader.ajax_loader.hidden
          .clear
        
        .vblk_2
        .grid_5.alpha
          %h4 Show notification of errors
          .info.small By default you will be notified if there have been errors. 
          .info.small But you can change this;
          .info
            = "Error reporting is currently #{@config["show_error_report"] ? 'ON' : 'OFF'}"
            = button_to "#{@config["show_error_report"] ? 'Disable' : 'Enable'}", :controller => :welcome, :action => :update, :method => :put, :error_reporting => !@config["show_error_report"] 
          
        
        .grid_5.omega
          %h4 Reset Help Tips
          .info.small Want the mildly helpful tips again? Then hit this reset button.
          = button_to "reset help tips", :controller => :welcome, :action => :update, :method => :put, :reset_help => true
          
        .clear
        .vblk_2

        .grid_10.alpha
          %h4 Update Part DBs when Jebretary starts
          .info.small When On the map of what parts you have installed in each KSP install will be refreshed each time Jebretary is started.
          .info.small This allows Jebretary to know when you change your mods and recheck craft for missing parts
          .info.small If you have lots of parts, or a slow disk, this can take a while.  If you are not going to change your installed parts you can switch it off, 
          .info.small Just remember to tell Jebretary to re-scan your craft if you do update your mods. (via the link on each instances page)
          

          = "Updating part DBs at start is: #{@config["update_parts_db_on_load"] ? 'ON' : 'OFF'}"
          = button_to "switch #{@config["update_parts_db_on_load"] ? 'Off' : 'On'}", :controller => :welcome, :action => :update, :method => :put, :update_parts_db_on_load => !@config["update_parts_db_on_load"] 
          

      
      
    
